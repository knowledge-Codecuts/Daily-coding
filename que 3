que 3

Ans:

Brut Force : O(n^2)
//check each combination 

Use hashmap: O(n)
// add each element's value and its index to the Map. 
Then check if each element's complement (targetâˆ’nums[i]) exists in the table. Beware that the complement must not be nums[i] itself!


public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        map.put(nums[i], i);
    }
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        //map.get(complement) !=i so that same number should not be considered again.
        if (map.containsKey(complement) && map.get(complement) != i) {
            return new int[] { i, map.get(complement) };
        }
    }
    throw new IllegalArgumentException("No two sum solution");
}

